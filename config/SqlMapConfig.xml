<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!-- 配置读取优先级：
            properties(属性)
            settings(全局配置参数)
            typeAliases(类型别名)
            typeHandlers(类型处理器)
            objectFactory(对象工厂)
            plugins(插件)
            environments(环境集合属性对象)
                environment(环境子属性参数)
                    transactionManager(事务管理)
                    dataSource(数据源)
            mapper(映射器)
    -->
    <properties resource="db.properties">
        <!-- properties 中还可以配置一些属性名和属性值 -->
        <!--<property name="driver" value=""/>-->
        <!--<property name="url" value=""/>-->
        <!--<property name="username" value=""/>-->
        <!--<property name="password" value=""/>-->
    </properties>

    <settings>
        <!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。  -->
        <setting name="cacheEnabled" value="true"/>
        <!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 
        特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 当开启时，任何方法的调用都会加载该对象的所有属性。 
        否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。 -->
        <setting name="aggressiveLazyLoading" value="true"/>
        <!-- 是否允许单一语句返回多结果集 -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现，
        具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。 -->
        <setting name="useColumnLabel" value="true"/>
        <!-- 允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键 -->
        <setting name="useGeneratedKeys" value="true"/>
        <!-- 指定 MyBatis 应如何自动映射列到字段或属性。
        NONE 表示取消自动映射；
        PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。
        FULL 会自动映射任意复杂的结果集 -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。
        - NONE: 不做任何反应
        - WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
        - FAILING: 映射失败 (抛出 SqlSessionException) -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!-- 配置默认的执行器。
        - SIMPLE 就是普通的执行器；
        - REUSE 执行器会重用预处理语句（prepared statements）；
        - BATCH 执行器将重用语句并执行批量更新。 -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
        <setting name="defaultStatementTimeout" value="25"/>
        <!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。
        此参数只可以在查询设置中被覆盖。 -->
        <setting name="defaultFetchSize" value="100"/>
        <!-- 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 -->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!-- 是否开启自动驼峰命名规则（camel case）映射，
             即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
             默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
             若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 -->
        <setting name="localCacheScope" value="SESSION"/>
        <!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。
             某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 -->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!-- 指定哪个对象的方法触发一次延迟加载。 -->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    </settings>

    <typeAliases>
        <!-- 针对单个别名定义
        type: 类型的路径
        alias: 别名
        -->
        <typeAlias type="com.selune.mybatis.pojo.User" alias="user" />
        <!-- 批量定义别名
            指定包名，mybatis自动扫描包内pojo类，自动定义别名，别名就是类名。(首字母大小写均可)
        -->
        <package name="com.selune.mybatis.pojo"/>
    </typeAliases>

    <!-- environments 设置数据库连接 -->
    <environments default="default">
        <environment id="default">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!-- 设置映射mapper -->
        <mapper resource="sqlmap/User.xml" />
        <mapper resource="mapper/UserMapper.xml" />
        <mapper resource="mapper/OrdersMapper.xml" />
        <!-- package 自动映射不能和resource 共存 -->
<!--        <package name="com.selune.mybatis.mapper"/>-->
    </mappers>

</configuration>