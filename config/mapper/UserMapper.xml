<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.selune.mybatis.mapper.UserMapper">

    <insert id="insertUser">
        <selectKey keyProperty="id" order="AFTER" resultType="integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user_ (id, username) VALUES (#{id}, #{username})
    </insert>

    <update id="updateUser">
        UPDATE user_ SET username= #{username} WHERE id= #{id}
    </update>

    <delete id="deleteUser">
        DELETE FROM user_ WHERE id= #{id}
    </delete>

    <select id="findUserById" resultType="com.selune.mybatis.pojo.User">
        SELECT * FROM user_ WHERE id= #{id}
    </select>

    <select id="findUserByName" resultType="com.selune.mybatis.pojo.User">
        SELECT * FROM user_ WHERE username LIKE '%${username}%'
    </select>

    <!-- 用户信息综合查询
        #{userCustom.sex}: 取出pojo包装对象中的性别
        #{userCustom.username}: 取出pojo包装对象中的用户名
    -->
    <select id="findUserList" parameterType="com.selune.mybatis.pojo.UserQueryVO"
            resultType="com.selune.mybatis.pojo.UserCustom">
        <!-- SELECT * FROM user_ WHERE user_.sex= #{userCustom.sex} AND user_.username LIKE
                                                                   '%${userCustom.username}%' -->
        SELECT * FROM user_
        <!-- where 可以自动去掉条件中的第一个AND -->
        <where>
            <!-- if 判断 -->
            <if test="userCustom != null">
                <if test="userCustom.sex != null and userCustom.sex != ''">
                    AND user_.sex= #{userCustom.sex}
                </if>
                <if test="userCustom.username != null and userCustom.username != ''">
                    AND user_.username LIKE '%${userCustom.username}%'
                </if>
            </if>
        </where>
    </select>

    <!-- 定义sql片段
         id: sql片段唯一标识
         基于单表来定义sql片段，sql片段的可重用性才高
         在sql片段中不要包含where
     -->
    <sql id="query_user_where">
        <if test="userCustom != null">
            <if test="userCustom.sex != null and userCustom.sex !=''">
                AND user_.sex= #{userCustom.sex}
            </if>
            <if test="userCustom.username != null and userCustom.username != ''">
                AND user_.username LIKE '%${userCustom.username}%'
            </if>
        </if>
    </sql>

    <!-- 用户信息查询总数
        parameterType: 指定输入类型
        resultType: 输出结果类型
    -->
    <select id="findUserCount" parameterType="com.selune.mybatis.pojo.UserQueryVO"
            resultType="int">
        <!-- SELECT count(*) FROM user_ WHERE user_.sex= #{userCustom.sex} AND user_.username LIKE
                                                                 '%${userCustom.username}%' -->
        SELECT count(*) FROM user_
        <where>
            <!-- include 引用sql片段
                 refid: 使用id引用
                 如果id不在本mapper中，需要加入namespace
             -->
            <include refid="query_user_where" />
        </where>
    </select>

    <!-- 定义resultMap
         将SELECT id id_, username username_ FROM user_ 和User类中的属性作一个映射关系
         type: resultMap 最终映射的java对象类型，可以使用别名
         id: 对resultMap的唯一标识
         使用resultType进行输出映射，只有查询出来的列和pojo中的属性名一致才能映射成功
         如果查出的列名和pojo中的属性名不一致，那么可以定义一个resultMap对列名和属性名作映射
     -->
    <resultMap id="userResultMap" type="user">
        <!-- id: 查询结果集中唯一标识
             column: 查询出的列名
             property: type指定的pojo类型中的属性名
             最终resultMap对column和property做一个映射关系
         -->
        <id column="id_" property="id" />
        <!-- result: 对普通名映射定义
             column: 查询出来的列名
             property: type指定的pojo类型中的属性名
             最终resultMap对column和property作一个映射关系
         -->
        <result column="username_" property="username" />
        <result column="sex_" property="sex" />
        <result column="bir_" property="bir" />
    </resultMap>
    <!-- 使用resultMap进行输出映射
         resultMap: 指定的resultMap的id，如果这个resultMap在其他的mapper文件中，前面需要加上namespace
     -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_, username username_, sex sex_, bir bir_ FROM user_ WHERE id= #{id}
    </select>

    <select id="findUserListByIds" parameterType="com.selune.mybatis.pojo.UserQueryVO"
            resultType="com.selune.mybatis.pojo.UserCustom">
        SELECT * FROM user_
        <where>
            <if test="ids != null">
                <!-- 使用foreach遍历传入ids
                     collection: 指定输入 对象中集合属性
                     item: 每个遍历生成对象中
                     open: 开始遍历的连接串
                     close: 结束遍历的连接串
                     separator: 遍历的两个对象中的连接词
                -->
                <!-- 使用实现下边的sql链接
                    AND (id = 1 OR id = 10 OR id = 16)
                -->
                <foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">
                    id= #{user_id}
                </foreach>
                <!--
                   实现 "AND id IN(1, 10, 16)" 的凭拼接
                -->
                <!--<foreach collection="ids" item="user_id" open="AND id IN (" close=")" separator=",">
                    #{user_id}
                </foreach>-->
            </if>
        </where>
    </select>

</mapper>